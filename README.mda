# React-Native-Redux
- Store:  holds our state - THERE IS ONLY ONE STATE
- Action - state can be modified using action - SIMPLE OBJECTS
- Dispatcher - Action needs to be sent by someone - know as dispatching an action 
- Reducer : receives the action and modifies the state to give us a new state
- Pure functions 
- Only mandatory argument is the ’type’
- Subscriber - listens for state change to update the ui (using connect).

1. install libray 
- react-redux 
- redux
2. create simple redux store 

import {createStore} from 'redux';

const reducer = (state = {value : 0 }, action ) => {
  if (action.type === 'UP') return {value : state.value + 1};
  if (action.type === 'DOWN') return {value: state.value - 1};
  return state;
}};

const store = createStore (reducer);

3. integrate redux store into React app

import {Provider} from 'react-redux';

export default class ReduxDemo extends Component {
  render () {
    return (
      <Provider store={store} >
        <App/>
      </Provider>
    )
  }
}

4. Use state in store redux to render react component

import {connect} from 'react-redux';

class App extends Component {
  render() {
    return (
      <View>
        <Text>{this.props.myValue}</Text>
      </View>
    )
  }
}


function mapStateToProps (state) {
  return {myValue: state.value};
}

export default connect(mapStateToProps)(App);

5. Dispatch action from components

onButtonPressed() {
  this.props.dispatch({type: 'UP'})
}
